version: '3.9'

services:
  
  # PHP
  php:
    build: 
      context: .
      dockerfile: php/Dockerfile 
      args:
        uid: ${UID}
        user: ${PHP_USER}
        php_version: ${PHP_VERSION}
        composer_version: ${COMPOSER_VERSION}
    image: laravel/php:${PHP_VERSION}
    container_name: php
    tty: true
    working_dir: /var/www
    ports:
      - "8888:80"
    volumes:
      - ${CODE_PATH}:/var/www
      - ~/.ssh:/home/${USER}/.ssh
      - ./php/php.ini:/usr/local/etc/php/conf.d/local.ini
    networks:
      - dev-env-network

  # PHP-SWOOLE
  php-swoole:
    image: ${PRIVATE_REGISTRY}/${SWOOLE_IMAGE}:${SWOOLE_VERSION}
    container_name: php-swoole
    tty: true
    working_dir: /var/www
    volumes:
      - ${CODE_PATH}:/var/www
    networks:
      - dev-env-network
      
  # NGINX
  nginx:
    image: nginx:${NGINX_VERSION}
    tty: true
    container_name: nginx
    ports:
      - "${NGINX_HTTP_PORT}:80"
    volumes:
      - ${CODE_PATH}:/var/www
      - ./nginx/conf.d:/etc/nginx/conf.d
    entrypoint:
      - "nginx"
    command: ["-g", "daemon off;"]
    networks:
      - dev-env-network

  # MYSQL
  mysql:
    image: mysql:${MYSQL_VERSION}
    tty: true 
    container_name: mysql
    ports:
      - "${MYSQL_HTTP_PORT}:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./mysql/my.cnf:/etc/mysql/conf.d/my.cnf
    environment:
      - MYSQL_ALLOW_EMPTY_PASSWORD=${MYSQL_ALLOW_EMPTY_PASSWORD}
      - MYSQL_ROOT_PASSWORD=${MY_ROOT_PASSWORD}
    networks:
      - dev-env-network

  # PHPMYADMIN
  phpmyadmin:
    image: phpmyadmin:${PHP_MYADMIN_VERSION}
    container_name: phpmyadmin
    environment:
      PMA_HOST: mysql
      PMA_PORT: 3306
      PMA_USER: root
      PMA_PASSWORD: ${MY_ROOT_PASSWORD}
      PMA_ARBITRARY: 1
    restart: always
    ports:
      - ${PHP_MY_ADMIN_PORT}:80
    networks:
      - dev-env-network

  # REDIS
  redis:
    image: redis:${REDIS_VERSION}
    tty: true
    container_name: redis
    ports:
      - "${REDIS_HTTP_PORT}:6379"
    volumes:
      - redis_data:/data
    networks:
      - dev-env-network
  
  # REDIS INSIGHT
  redis-inside:
    image: redislabs/redisinsight:${REDIS_INSIDE_VERSION}
    container_name: redis-inside
    tty: true
    ports:
      - "${REDIS_INSIDE_HTTP_PORT}:8001"
    volumes:
      - redis_inside_data:/db
    networks:
      - dev-env-network

  # MINIO
  minio:
    image: quay.io/minio/minio:${MINIO_VERSION}
    container_name: minio
    ports:
      - "${MINIO_HTTP_PORT}:9090"
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
    command: server --console-address :9090 /data
    volumes:
      - minio_data:/data
    networks:
      - dev-env-network

  # 

  # MONGODB
  # mongo:
  #   image: mongo:${MONGODB_VERSION}
  #   tty: true
  #   container_name: mongo
  #   ports:
  #     - "${MONGODB_PORT}:27017"
  #   volumes:
  #     - mongo_data:/data/db
  #   environment:
  #     - MONGO_INITDB_ROOT_USERNAME=${MONGODB_ROOT_USERNAME}
  #     - MONGO_INITDB_ROOT_PASSWORD=${MONGODB_ROOT_PASSWORD}
  #   networks:
  #     - dev-env-network
  
  # MONGO_EXPRESS
  # mongo-express:
  #   image: mongo-express:${ME_VERSION}
  #   tty: true
  #   container_name: mongo-express
  #   ports:
  #     - "${ME_HTTP_PORT}:8081"
  #   depends_on:
  #     - mongo
  #   environment:
  #     - ME_CONFIG_MONGODB_SERVER=mongo
  #     - ME_CONFIG_MONGODB_ADMINUSERNAME=${ME_USERNAME}
  #     - ME_CONFIG_MONGODB_ADMINPASSWORD=${ME_PASSWORD}
  #     - ME_CONFIG_MONGODB_URL=mongodb://${MONGODB_ROOT_USERNAME}:${MONGODB_ROOT_PASSWORD}@mongo:27017/
  #   networks:
  #     - dev-env-network

# Network
networks:
  dev-env-network:
    name: dev-env-network
    driver: bridge

# Volumes
volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local
  redis_inside_data:
    driver: local
  minio_data:
    driver: local
  # mongo_data:
  #   driver: local